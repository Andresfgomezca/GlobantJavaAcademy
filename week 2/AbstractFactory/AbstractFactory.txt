Intent
	-Provide an interface for creating families of related or dependent objects without specifying their concrete classes.
	-A hierarchy that encapsulates: many possible "platforms", and the construction of a suite of "products"
	-the "new" operator considered harmful.

Problem
	-If an application is to be portable, it needs to encapsulate platform dependencies. there "platforms" might include:windowing system, operating system, database, etc. Too often, this encapsulation is not engineered in advance, and lots of #ifdef case statements with options for all currently supported platforms begin to procreate like rabbits throughout the code.

Discussion
	Provide a level of indirection that abstracts the creation of families of related or dependent objects without directly specifying their concrete classes. The "factory" object has the responsibility for providing creation services for the entire platform family. Clients never create platform objects directly, they ask the factory to do that for them.

	This mechanism makes exxchanging product families easy because the specific class of the factory object appears only one in the application -where it is instantiated. the application can wholesale replace the entire family of products simply by instantiating a different concrete instance of the abstract factory.

	Because the service provide by the factory object is so pervasive, it is routinely implemented as a singleton.

Structure
	The abstract factory defines a factory method per product. Each factory method encapsulates the new operator and the concrete, platform-specific, product, classes. each "platform" is then modeled with a factory derived class. 

Example
	The purpose of the abstract factory is to provide an interface for creating families of related objects, without specifying concrete classes. This pattern is found in the sheet metal stamping equipment used in the manufacture of japanese automobiles.
	the stamping equipment is an abstract factory which creates auto body parts. the same  machinery is uysed to stamp right hand doors, left hand doors, right front fenders, left fron fenders, hoods, etc. for different models of cars. through the use of rollers to change the stamping dies, the concrete classes produced by the machinery can be changed within three minutes.

Check list
	1. decide if "platform independence" and creation services are the current source of pain.
	2. Map out a matrixx of "platforms" versus "products"
	3.Define a factory interface that consist of a factory method per product.
	4. Define a factory derived class for each platform that encapsulates all references to the new operator.
	5.The client should retire all references to new, and use the factory methods to create the product objects. 

Rules of thumb
	Sometimes creational patterns are competitors:  there are cases when either prototype or abstract factory could be used profitably. at other times they are complementary: abstract factory might store a set of prototypes from which to clone and return product objects, builder can use one of the other patterns to implement which components get built. Abstract factory, builder and prototype can use singleton in their implementation. 
	Abstract factory, builder and prototype define a factory object that's responsible for knowing and creating the class of product objects, and make it a parameter of the system. abstract factory has the factory object building complex product incrementally using a correspondingly complex protocol. Prototype has the factory object(aka prototype) building a product by copying a prototype object. 
	abtract factory classes are often implemented with factory methods, but they can also be implemented using prototype.
	Abtract factory can be used as an alternative to facade to hide platform'specific classes.
	Builder focuses on contructing a complex object step by step. Abstract factory emphasizes a family of product objects(either simple or complex). builder return the product as a final step, but as far as the abstract factory is concerned, the product gets returned immediately.
	often, designs start out using factory method(less complicated, more customizable, subclasses proliferate) and evolve toward abstract factory, prototype or builder (more flexxixble, more complexxx) as the designer discovers where more flexibility is needed.



structure

1 paquete de patron de dise√±o
1 main donde se ejecuta las clases

this patter has products and factories, both of them have their own interface, an abstract factory and an abstract product.

1 abstract product - abstract methods
1 abstract factory - abstract method
multiple concrete factories
multiple concrete products

main will only comunicate with the concrete factories using the abstract methods of the abstract factory. 

https://www.youtube.com/watch?v=xNsPGA7zrVQ
factory example
		
