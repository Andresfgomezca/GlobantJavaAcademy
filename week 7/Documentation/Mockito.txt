Mockito
https://site.mockito.org/

Why drink it?

	Mockito is a mocking framework that tastes really good. It lets you write beautiful tests with a clean & simple API. Mockito doesn’t give you hangover because the tests are very readable and they produce clean verification errors. Read more about features & motivations.
https://github.com/mockito/mockito/wiki/Features-And-Motivations

	-Massive StackOverflow community voted Mockito the best mocking framework for java. Even though StackOverflow shuns questions that likely raise emotional debates the fact is Mockito has the most votes.

	-Top 10 Java library across all libraries, not only the testing tools. In late 2013 there was an analysis made of 30.000 GitHub projects. Although Mockito reached number 9 in the main report, mockito-core and mockito-all are the same tool and therefore the factual position of Mockito is number 4, surpassing famous tools like Guava or Spring. Treat this study as an indicator of a big impact that Mockito makes every day on unit tests written in Java.

	-Dan North, the originator of Behavior-Driven Development wrote this back in 2008:

	“We decided during the main conference that we should use JUnit 4 and Mockito because we think they are the future of TDD (es una práctica de ingeniería de software que involucra otras dos prácticas: Escribir las pruebas primero (Test First Development) y Refactorización (Refactoring)) and mocking in Java”

	Given the current popularity of Mockito, Dan was spot on with his prediction.

	Use your own judgement in choosing a testing framework. The Mockito team always respects your choice. Keep writing great tests every day!

How do I drink it?

	Recommended way of getting Mockito is declaring a dependency on “mockito-core” library using your favorite build system. With Gradle one can do:

repositories { mavenCentral() }
dependencies { testImplementation "org.mockito:mockito-core:3.+" }

	Maven users can declare a dependency on mockito-core. Mockito publishes every change as a -SNAPSHOT version to a public Sonatype repository.

	Users doing manual dependency management can download the jars directly from Maven Central.

	Legacy builds with manual dependency management can use the 1.* “mockito-all” distribution. Said distribution has been discontinued in Mockito 2.*.

now you can verify interactions

import static org.mockito.Mockito.*;

// mock creation
List mockedList = mock(List.class);

// using mock object - it does not throw any "unexpected interaction" exception
mockedList.add("one");
mockedList.clear();

// selective, explicit, highly readable verification
verify(mockedList).add("one");
verify(mockedList).clear();

and stub method calls

// you can mock concrete classes, not only interfaces
LinkedList mockedList = mock(LinkedList.class);

// stubbing appears before the actual execution
when(mockedList.get(0)).thenReturn("first");

// the following prints "first"
System.out.println(mockedList.get(0));

// the following prints "null" because get(999) was not stubbed
System.out.println(mockedList.get(999));

More info

Main reference documentation features:

	-mock()/@Mock: create mock
optionally specify how it should behave via Answer/MockSettings
when()/given() to specify how a mock should behave
If the provided answers don’t fit your needs, write one yourself extending the Answer interface

	-spy()/@Spy: partial mocking, real methods are invoked but still can be verified and stubbed

	-@InjectMocks: automatically inject mocks/spies fields annotated with @Spy or @Mock
verify(): to check methods were called with given arguments
		-can use flexible argument matching, for example any expression via the any()
		
		-or capture what arguments were called using @Captor instead

	-Try Behavior-Driven development syntax with BDDMockito

	-Use Mockito on Android, thanks to the team working on dexmaker

Remember

	-Do not mock types you don’t own

	-Don’t mock value objects
	
	-Don’t mock everything
	
	-Show love with your tests!

Click here for more documentation and examples. All documentation lives in javadocs so you don’t need to visit that page too often. There is also a RefCard.
http://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html



If you have suggestions, find documentation unclear, or find a bug, write to our mailing list. You can report feature requests and bugs in GitHub.