Introduction to Spring Data JPA
https://www.baeldung.com/the-persistence-layer-with-spring-data-jpa

1. Overview
	
	This tutorial will focus on introducing Spring Data JPA into a Spring project, and fully configuring the persistence layer. For a step by step introduction to setting up the Spring context using Java-based configuration and the basic Maven pom for the project, see this article.
https://www.baeldung.com/bootstraping-a-web-application-with-spring-and-java-based-configuration


2. The Spring Data Generated DAO â€“ No More DAO Implementations

	As we discussed in an earlier article, the DAO layer usually consists of a lot of boilerplate code that can and should be simplified. The advantages of such a simplification are many: a decrease in the number of artifacts that we need to define and maintain, consistency of data access patterns, and consistency of configuration.
https://www.baeldung.com/simplifying-the-data-access-layer-with-spring-and-java-generics

	Spring Data takes this simplification one step further and makes it possible to remove the DAO implementations entirely. The interface of the DAO is now the only artifact that we need to explicitly define.

	In order to start leveraging the Spring Data programming model with JPA, a DAO interface needs to extend the JPA specific Repository interface, JpaRepository. This will enable Spring Data to find this interface and automatically create an implementation for it.

	By extending the interface, we get the most relevant CRUD methods for standard data access available in a standard DAO.

3. Custom Access Method and Queries

	As discussed, by implementing one of the Repository interfaces, the DAO will already have some basic CRUD methods (and queries) defined and implemented.

	To define more specific access methods, Spring JPA supports quite a few options:

	simply define a new method in the interface
provide the actual JPQL query by using the @Query annotation use the more advanced Specification and Querydsl support in Spring Data

	define custom queries via JPA Named Queries

	The third option, Specifications and Querydsl support, is similar to JPA Criteria, but uses a more flexible and convenient API. This makes the whole operation much more readable and reusable. The advantages of this API will become more pronounced when dealing with a large number of fixed queries, as we could potentially express these more concisely through a smaller number of reusable blocks.

	The last option has the disadvantage that it either involves XML or burdening the domain class with the queries.

3.1. Automatic Custom Queries

	When Spring Data creates a new Repository implementation, it analyses all the methods defined by the interfaces and tries to automatically generate queries from the method names. While this has some limitations, it's a very powerful and elegant way of defining new custom access methods with very little effort.

	Let's look at an example. If the entity has a name field (and the Java Bean standard getName and setName methods), we'll define the findByName method in the DAO interface. This will automatically generate the correct query:

public interface IFooDAO extends JpaRepository<Foo, Long> {

    Foo findByName(String name);

}

	This is a relatively simple example. The query creation mechanism supports a much larger set of keywords.

	In case the parser can't match the property with the domain object field, we'll see the following exception:

java.lang.IllegalArgumentException: No property nam found for type class com.baeldung.spring.data.persistence.model.Foo

3.2. Manual Custom Queries

	Now let's look at a custom query that we'll define via the @Query annotation:

@Query("SELECT f FROM Foo f WHERE LOWER(f.name) = LOWER(:name)")
Foo retrieveByName(@Param("name") String name);

	For even more fine-grained control over the creation of queries, such as using named parameters or modifying existing queries, the reference is a good place to start.

4. Transaction Configuration 

	The actual implementation of the Spring-managed DAO is indeed hidden since we don't work with it directly. However, it's a simple enough implementation, the SimpleJpaRepository, which defines transaction semantics using annotations.

	More explicitly, this uses a read-only @Transactional annotation at the class level, which is then overridden for the non-read-only methods. The rest of the transaction semantics are default, but these can be easily overridden manually per method.

4.1. Exception Translation Is Alive and Well 

	The question now becomes: since Spring Data JPA doesn't depend on the old ORM templates (JpaTemplate, HibernateTemplate), and they have been removed since Spring 5, are we still going to get our JPA exceptions translated to Spring's DataAccessException hierarchy?

	The answer is, of course we are. Exception translation is still enabled by the use of the @Repository annotation on the DAO. This annotation enables a Spring bean postprocessor to advise all @Repository beans with all the PersistenceExceptionTranslator instances found in the container, and provide exception translation just as before.

	Let's verify exception translation with an integration test:

@Test(expected = DataIntegrityViolationException.class)
public void givenFooHasNoName_whenInvalidEntityIsCreated_thenDataException() {
    service.create(new Foo());
}

	Keep in mind that exception translation is done through proxies. In order for Spring to be able to create proxies around the DAO classes, these must not be declared final.

5. Spring Data JPA Repository Configuration

	To activate the Spring JPA repository support, we can use the @EnableJpaRepositories annotation and specify the package that contains the DAO interfaces:

@EnableJpaRepositories(basePackages = "com.baeldung.spring.data.persistence.repository") 
public class PersistenceConfig { 
    ...
}

We can do the same with an XML configuration:

<jpa:repositories base-package="com.baeldung.spring.data.persistence.repository" />

6. Java or XML Configuration

	We already discussed in great detail how to configure JPA in Spring in a previous article. Spring Data also takes advantage of Spring's support for the JPA @PersistenceContext annotation. It uses this to wire the EntityManager into the Spring factory bean responsible for creating the actual DAO implementations, JpaRepositoryFactoryBean.
https://www.baeldung.com/the-persistence-layer-with-spring-and-jpa

	In addition to the already discussed configuration, we also need to include the Spring Data XML Config if we are using XML:

@Configuration
@EnableTransactionManagement
@ImportResource("classpath*:*springDataConfig.xml")
public class PersistenceJPAConfig {
    ...
}

7. Maven Dependency

	In addition to the Maven configuration for JPA, like in a previous article, we'll add the spring-data-jpa dependency:
https://www.baeldung.com/the-persistence-layer-with-spring-and-jpa

<dependency>
   <groupId>org.springframework.data</groupId>
   <artifactId>spring-data-jpa</artifactId>
   <version>2.4.0</version>
</dependency>

8. Using Spring Boot

	We can also use the Spring Boot Starter Data JPA dependency that will automatically configure the DataSource for us.

	We need to make sure that the database we want to use is present in the classpath. In our example, we've added the H2 in-memory database:

<dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-data-jpa</artifactId>
   <version>2.6.1</version>
</dependency>
<dependency>
    <groupId>com.h2database</groupId>
    <artifactId>h2</artifactId>
    <version>1.4.200</version>
</dependency>

	As a result, just by doing these dependencies, our application is up and running and we can use it for other database operations.

	The explicit configuration for a standard Spring application is now included as part of Spring Boot auto-configuration.

	We can, of course, modify the auto-configuration by adding our customized explicit configuration.

	Spring Boot provides an easy way to do this using properties in the application.properties file:

spring.datasource.url=jdbc:h2:mem:db;DB_CLOSE_DELAY=-1
spring.datasource.username=sa
spring.datasource.password=sa

	In this example, we've changed the connection URL and credentials.

9. Conclusion

	In this article, we covered the configuration and implementation of the persistence layer with Spring 5, JPA 2, and Spring Data JPA (part of the Spring Data umbrella project) using both XML and Java-based configuration.

	We discussed ways to define more advanced custom queries, as well as transactional semantics, and a configuration with the new jpa namespace. The final result is a new and elegant take on data access with Spring, with almost no actual implementation work.

	The implementation of this Spring Data JPA tutorial can be found in the GitHub project.
https://github.com/eugenp/tutorials/tree/master/persistence-modules/spring-data-jpa-repo-2