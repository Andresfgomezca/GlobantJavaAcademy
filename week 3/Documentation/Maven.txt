Introduction
	Maven, a Yiddish word meaning accumulator of knowledge, began as an attempt to simplify the build processes in the Jakarta Turbine project. There were several projects, each with their own Ant build files, that were all slightly different. JARs were checked into CVS. We wanted a standard way to build the projects, a clear definition of what the project consisted of, an easy way to publish project information, and a way to share JARs across several projects.

	The result is a tool that can now be used for building and managing any Java-based project. We hope that we have created something that will make the day-to-day work of Java developers easier and generally help with the comprehension of any Java-based project.

Maven's Objectives
Mven's primary goal is to allow a developer to comprehend the complete state of a development effort in the shortest period of time. in order to attain this goal, Moven deals with several areas of concern:
	-Making the build process easy
	-Providing a uniform build system
	-Providing quality project information
	-Encouraging better development practices

Making the build process easy
	while using maven doesn't eliminate the need to know about the underlying mechanisms, maven does shield developers from many details

Providing a uniform build system
	Maven builds a project using its project object model (POM) and a set of plugins. Once you familiarize yourself with one maven project. you know how all maven projects build. This saves time when navigating many projects. 

Providing quality project information
	Maven provides useful project information that is in part taken from your POM and in part generated from your project's sources. for example, maven can provide:
	-Change log created directly form source control
	-Cross referenced sources
	-Mailing lists managed by the project
	-Dependencies used by the project
	-Unit test reports including coverage
Third party code analysis products also provide maven plugins that add their reports to te standard information given by maven.

Providing guidelines for best practices development
	Maven aims to gather current principles for best practices development and make it easy to guide a project in that direction

	For example, specification, execution and reporting of unit tests are part of the normal build cycle using maven. Current unit testing best practices were used as guidelines:
	-Keeping test source code in a separate, but parallel source tree
	-Using test case naming conventions to locate and execute tests
	-Having test cases setup their environment instead of customizing the build for test preparation.

	Maven also assists in project workflow such as release and issue management.

	Maven also suggests some guidelines on how to layout your project's directory structure. Once you learn the layout, you can easily navegate other projects that use maven. 

	While takes an opinionated approach to project layout, some projects may not fit with this structure for historical reasons. while maven is designed to be flexible to the needs of different projects, it cannot cater to every situation without compromising its objectives.

	If your project has an unusual build structure that cannot be reorganized, you may have to forgot some features or the use of maven altogether. 

What is maven not?
	You might have heard some of the following things about maven:
	-Maven is a site and documentation tool
	-Maven extends ant to let you download dependencies
	-Maven is a ser of reusable ant scriptlets

While maven does these things, as you can read above in the what is maven? section, there are not the only features maven has, and its objectives are quite different.

Feature summary

	The following are the key features of maven in a nutshell(abbreviated form):
	-Simple project setup that follows best practices, get a new project or module started in seconds
	-Consistent usage across all projects, means no ramp up time for new developers coming onto a project.
	-Superior dependency management including automatic updating, dependency closures(also known as transitive dependencies)
	-Able to easily work with multiple projects at the same time
	-A large and growing repository of libraries and metadata to use out of the box, and arrangements in place with the largest open source projects for real-time availability of their latest releases
	-Extensible, with the ability to easily write plugins in java or scripting lenguages
	-Instant access to new features with little or no extra configuration
	-Ant tasks for dependency management and deployment outside of maven
	-Model based builds: Maven is able to build any number of projects into predefined output types such as a JAR, WAR or distribution based on metadata about the project, without the need to do any scripting in most cases.
	-Coherent site of project information: Usingthe same metadata as for the build process, maven is able to generate a website or PDF includiong any documentation youc are to add, and adds to that standard reports about the state of development of the project, examples of this information can be seen at the bottom of the left-hand navigation of this site under the "project information" and "project reports" submenus.

	-Release management and distribution publication: wthout much additional configuration, maven will integrate with your source control system(such as subversion or git) and manage the release of a project based on a certain tag. It can also publish this to a distribution location for use by other projects. Maven is able to publish individual outputs such as a JAR, an archive including other dependencies and documentation, or as a source distribution.

	-Dependency management: Maven encourages the use of a central repository of JARs and other dependencies. Maven comes with a mechanism that your project's clients can use to download any JARs required for building your project from a central JAR repository much like Perl's CPAN. This allows users of maven to reuse JARs acrss projects and encourages communication between projects to ensure that backward compatibility issues are dealt with. 

MAVEN IN 5 MINUTES

Prerequisites

	You must understand how to install software on your computes. If youy do not know how to do this please ask some one at your office, school,  etc. or pay someone to explain this to you. the maven mailing list are not the best palce to ask for this advice.

Installation

	Maven is a java tool, so you must have java installed.

	First download mavenand follow the installation isntruction. After that, type the following in a terminal or in a command prompt:
	
	


info from the meeting {

manejador de paquetes de string
npn noodles

app postman verificador de metotdos de backend

Spring Boot:
Spring Application
Externalized Configuration
Profiles
Logging
Spring Core:
IoC Container
Resources
Data binding and validation
SpEL
AOP
Testing

model view controler MVC
}